@page "/deportes"

<h3>Deportes</h3>

@using FrontEndVirOBlazorAsamblin.Services
@using FrontEndVirOBlazorAsamblin.Models
@inject DeporteService DeporteService
@inject IJSRuntime JS

<h3 class="mb-4">🏅 Gestión de Deportes</h3>

<button class="btn btn-success mb-3" @onclick="AbrirModalNuevo">
    <i class="bi bi-plus-circle"></i> Agregar Deporte
</button>

@if (deportes == null)
{
    <p>Cargando deportes...</p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Nombre</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in deportes)
            {
                <tr>
                    <td>@d.Id</td>
                    <td>@d.Nombre</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => AbrirModalEditar(d)">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger me-1" @onclick="() => Eliminar(d.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal -->
<div class="modal fade" id="modalDeporte" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="deporteForm" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">@((editando ? "Editar" : "Agregar") + " Deporte")</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Nombre</label>
                        <InputText class="form-control" @bind-Value="deporteForm.Nombre" />
                        <ValidationMessage For="@(() => deporteForm.Nombre)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check-circle"></i> Guardar
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle"></i> Cancelar
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    List<DeporteDto>? deportes;
    DeporteDto deporteForm = new();
    bool editando = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDeportes();
    }

    async Task CargarDeportes()
    {
        deportes = await DeporteService.GetAllAsync();
    }

    void AbrirModalNuevo()
    {
        deporteForm = new();
        editando = false;
        MostrarModal();
    }

    void AbrirModalEditar(DeporteDto d)
    {
        deporteForm = new DeporteDto { Id = d.Id, Nombre = d.Nombre };
        editando = true;
        MostrarModal();
    }

    async Task Guardar()
    {
        bool ok = editando
            ? await DeporteService.UpdateAsync(deporteForm.Id, deporteForm)
            : await DeporteService.CreateAsync(deporteForm);

        if (ok)
        {
            await CargarDeportes();
            await OcultarModal();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al guardar el deporte.");
        }
    }

    async Task Eliminar(int id)
    {
        var confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Eliminar deporte con ID {id}?");
        if (confirmado)
        {
            var ok = await DeporteService.DeleteAsync(id);
            if (ok)
                await CargarDeportes();
        }
    }

    async Task MostrarModal()
    {
        await JS.InvokeVoidAsync("bootstrapInterop.showModal", "#modalDeporte");
    }

    async Task OcultarModal()
    {
        await JS.InvokeVoidAsync("bootstrapInterop.hideModal", "#modalDeporte");
    }
}